{"name":"service-hub","tagline":"A semantically versioned provider/consumer system for global application services.","body":"The `order-pizza` library wants to provide a global service for use by other\r\nmodules in the application. It calls provide on a global `ServiceHub` instance\r\nwith the name of the service and the current semantic version of the API:\r\n\r\n```coffee\r\n# Provider\r\n\r\nglobal.services.provide \"order-pizza\", \"1.0.0\",\r\n  placeOrder: (size, topping) -> # ...\r\n```\r\n\r\nThen two other libraries *consume* this service, ensuring they are compatible\r\nwith its API by specifying a version range:\r\n\r\n```coffee\r\n# Consumer 1\r\n\r\nworkingLate: ->\r\n  global.services.consume \"order-pizza\", \"^1.0.0\", (orderPizza) ->\r\n    orderPizza.placeOrder(\"medium\", \"four cheese\")\r\n\r\n# Consumer 2\r\n\r\nburntDinner: ->\r\n  global.services.consume \"order-pizza\", \"^1.0.0\", (orderPizza) ->\r\n    orderPizza.placeOrder(\"large\", \"pepperoni\")\r\n```\r\n\r\nNow the author of the `order-pizza` makes a breaking change to the API. They\r\nstart providing another instance of the service associated with the next major\r\nversion number, converting the old service to a shim for compatibility:\r\n\r\n```coffee\r\n# Provider\r\n\r\nplaceOrder = ({size, toppings}) -> # ...\r\n\r\n# Providing the new API\r\nglobal.services.provide \"order-pizza\", \"2.0.0\", {placeOrder}\r\n\r\n# Shimming the old API\r\nglobal.services.provide \"order-pizza\", \"1.0.0\",\r\n  placeOrder: (size, topping) ->\r\n    placeOrder({size, toppings: [topping]})\r\n```\r\n\r\nIf at some point the API changed so drastically that it wasn't possible to shim\r\nprevious versions, at least the outdated consumers wouldn't use the new API\r\nincorrectly. They would just fail to discover the service.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}